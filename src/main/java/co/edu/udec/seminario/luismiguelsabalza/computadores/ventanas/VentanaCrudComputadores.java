/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.edu.udec.seminario.luismiguelsabalza.computadores.ventanas;

import co.edu.udec.seminario.luismiguelsabalza.computadores.bd.crud.ComputadorJpaController;
import co.edu.udec.seminario.luismiguelsabalza.computadores.bd.crud.exceptions.NonexistentEntityException;
import co.edu.udec.seminario.luismiguelsabalza.computadores.bd.crud.exceptions.PreexistingEntityException;
import co.edu.udec.seminario.luismiguelsabalza.computadores.bd.entidades.Computador;
import java.awt.Color;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.PersistenceException;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author EQUIPO
 */
public class VentanaCrudComputadores extends javax.swing.JDialog {

    /**
     * Creates new form VentanaLogin
     */
    private Computador u;
    public VentanaCrudComputadores(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoCPU = new javax.swing.ButtonGroup();
        grupoRAM = new javax.swing.ButtonGroup();
        grupoDisco = new javax.swing.ButtonGroup();
        iniciarSesion = new javax.swing.JLabel();
        botonCancelar = new javax.swing.JButton();
        botonAgregar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        contraseña = new javax.swing.JLabel();
        campoPassword1 = new javax.swing.JPasswordField();
        iddelProducto = new javax.swing.JLabel();
        campoId = new javax.swing.JTextField();
        contraseña1 = new javax.swing.JLabel();
        campoPassword2 = new javax.swing.JPasswordField();
        marcaPC = new javax.swing.JLabel();
        campoMarcaPC = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        comboCategoria = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        radioIntel = new javax.swing.JRadioButton();
        radioAMD = new javax.swing.JRadioButton();
        radioXX = new javax.swing.JRadioButton();
        velocidadCPU = new javax.swing.JLabel();
        campoVelCPU = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        radioDDR = new javax.swing.JRadioButton();
        radioDDR2 = new javax.swing.JRadioButton();
        radioXXX = new javax.swing.JRadioButton();
        radioDDR3 = new javax.swing.JRadioButton();
        radioEEC = new javax.swing.JRadioButton();
        capacidadRAM = new javax.swing.JLabel();
        campoCapRAM = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        radioHDD = new javax.swing.JRadioButton();
        radioSSD = new javax.swing.JRadioButton();
        radioXXXX = new javax.swing.JRadioButton();
        capacidadDisco = new javax.swing.JLabel();
        campoCapDisco = new javax.swing.JTextField();
        puertosUSB = new javax.swing.JLabel();
        campoUSB = new javax.swing.JTextField();
        puertosHDMI = new javax.swing.JLabel();
        campoHDMI = new javax.swing.JTextField();
        marcaMonitor = new javax.swing.JLabel();
        pulgadas = new javax.swing.JLabel();
        campoPulgadas = new javax.swing.JTextField();
        precio = new javax.swing.JLabel();
        campoPrecio = new javax.swing.JTextField();
        ComboMonitor = new javax.swing.JComboBox<>();
        botonBuscar = new javax.swing.JButton();
        botonEditar = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        botonLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CRUD");

        iniciarSesion.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        iniciarSesion.setForeground(new java.awt.Color(0, 0, 255));
        iniciarSesion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iniciarSesion.setText("FORMULARIO PARA COMPUTADORES");

        botonCancelar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        botonCancelar.setText("Cancelar");
        botonCancelar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });

        botonAgregar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        botonAgregar.setText("Agregar");
        botonAgregar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        botonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 255), 2, true), "Datos del Computador", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(204, 0, 0))); // NOI18N

        contraseña.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        contraseña.setForeground(new java.awt.Color(0, 0, 255));
        contraseña.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        contraseña.setText("CONTRASEÑA");

        campoPassword1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoPassword1.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        iddelProducto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        iddelProducto.setForeground(new java.awt.Color(0, 0, 255));
        iddelProducto.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        iddelProducto.setText("ID DEL PRODUCTO");

        campoId.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoId.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        campoId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoIdActionPerformed(evt);
            }
        });

        contraseña1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        contraseña1.setForeground(new java.awt.Color(0, 0, 255));
        contraseña1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        contraseña1.setText("Re-CONTRASEÑA");

        campoPassword2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoPassword2.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        marcaPC.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        marcaPC.setForeground(new java.awt.Color(0, 0, 255));
        marcaPC.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        marcaPC.setText("MARCA DEL PC");

        campoMarcaPC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoMarcaPC.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        campoMarcaPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoMarcaPCActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Categoria de Computadores", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(255, 0, 0))); // NOI18N

        comboCategoria.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comboCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una categoria...", "Supercomputadora", "Mainframes", "PC de Escritorio", "PC Portatil", "Otros" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(comboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(comboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Marca del CPU", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(255, 0, 0))); // NOI18N

        grupoCPU.add(radioIntel);
        radioIntel.setText("INTEL");

        grupoCPU.add(radioAMD);
        radioAMD.setText("AMD");

        grupoCPU.add(radioXX);
        radioXX.setText("Otros");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(radioIntel)
                .addGap(18, 18, 18)
                .addComponent(radioAMD)
                .addGap(26, 26, 26)
                .addComponent(radioXX)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioIntel)
                    .addComponent(radioAMD)
                    .addComponent(radioXX))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        velocidadCPU.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        velocidadCPU.setForeground(new java.awt.Color(0, 0, 255));
        velocidadCPU.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        velocidadCPU.setText("VELOCIDAD DEL CPU");

        campoVelCPU.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoVelCPU.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        campoVelCPU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoVelCPUActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tecnologia del RAM", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(255, 0, 0))); // NOI18N

        grupoRAM.add(radioDDR);
        radioDDR.setText("DDR");

        grupoRAM.add(radioDDR2);
        radioDDR2.setText("DDR2");

        grupoRAM.add(radioXXX);
        radioXXX.setText("Otros");

        grupoRAM.add(radioDDR3);
        radioDDR3.setText("DDR3");

        grupoRAM.add(radioEEC);
        radioEEC.setText("EEC");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioDDR)
                    .addComponent(radioDDR3))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioDDR2)
                    .addComponent(radioEEC))
                .addGap(18, 18, 18)
                .addComponent(radioXXX)
                .addContainerGap(8, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioDDR)
                    .addComponent(radioDDR2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioDDR3)
                    .addComponent(radioEEC)))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioXXX)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        capacidadRAM.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        capacidadRAM.setForeground(new java.awt.Color(0, 0, 255));
        capacidadRAM.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        capacidadRAM.setText("CAPACIDAD DEL RAM");

        campoCapRAM.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoCapRAM.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        campoCapRAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoCapRAMActionPerformed(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tecnologia del Disco", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(255, 0, 0))); // NOI18N

        grupoDisco.add(radioHDD);
        radioHDD.setText("HDD");

        grupoDisco.add(radioSSD);
        radioSSD.setText("SSD");

        grupoDisco.add(radioXXXX);
        radioXXXX.setText("Otros");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(radioHDD)
                .addGap(18, 18, 18)
                .addComponent(radioSSD)
                .addGap(31, 31, 31)
                .addComponent(radioXXXX)
                .addContainerGap(9, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioHDD)
                    .addComponent(radioSSD)
                    .addComponent(radioXXXX))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        capacidadDisco.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        capacidadDisco.setForeground(new java.awt.Color(0, 0, 255));
        capacidadDisco.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        capacidadDisco.setText("CAPACIDAD DEL DISCO");

        campoCapDisco.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoCapDisco.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        campoCapDisco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoCapDiscoActionPerformed(evt);
            }
        });

        puertosUSB.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        puertosUSB.setForeground(new java.awt.Color(0, 0, 255));
        puertosUSB.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        puertosUSB.setText("N° PUERTOS USB");

        campoUSB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoUSB.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        campoUSB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoUSBActionPerformed(evt);
            }
        });

        puertosHDMI.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        puertosHDMI.setForeground(new java.awt.Color(0, 0, 255));
        puertosHDMI.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        puertosHDMI.setText("N° PUERTOS HDMI");

        campoHDMI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoHDMI.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        campoHDMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoHDMIActionPerformed(evt);
            }
        });

        marcaMonitor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        marcaMonitor.setForeground(new java.awt.Color(0, 0, 255));
        marcaMonitor.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        marcaMonitor.setText("MARCA DEL MONITOR");

        pulgadas.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        pulgadas.setForeground(new java.awt.Color(0, 0, 255));
        pulgadas.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pulgadas.setText("PULGADAS");

        campoPulgadas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoPulgadas.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        campoPulgadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoPulgadasActionPerformed(evt);
            }
        });

        precio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        precio.setForeground(new java.awt.Color(0, 0, 255));
        precio.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        precio.setText("PRECIO ($)");

        campoPrecio.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoPrecio.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        campoPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoPrecioActionPerformed(evt);
            }
        });

        ComboMonitor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ComboMonitor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione un Monitor...", "ACER", "ASUS", "PHILIPS", "BENQ", "DELL", "Otros" }));
        ComboMonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboMonitorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(contraseña)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(campoPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(iddelProducto)
                                    .addGap(18, 18, 18)
                                    .addComponent(campoId, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(contraseña1)
                                    .addComponent(marcaPC))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(campoPassword2, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(campoMarcaPC, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(precio)
                                    .addComponent(pulgadas))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(campoPulgadas, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(campoPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(puertosUSB)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(campoUSB, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(12, 12, 12)
                            .addComponent(puertosHDMI)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(campoHDMI))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(velocidadCPU)
                                .addComponent(campoVelCPU)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(capacidadDisco)
                                    .addGap(46, 46, 46))
                                .addComponent(campoCapDisco)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(capacidadRAM)
                                .addComponent(campoCapRAM))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(marcaMonitor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ComboMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 5, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iddelProducto)
                    .addComponent(campoId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contraseña)
                    .addComponent(campoPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contraseña1)
                    .addComponent(campoPassword2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(marcaPC)
                    .addComponent(campoMarcaPC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(velocidadCPU)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoVelCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(capacidadRAM)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoCapRAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(capacidadDisco)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoCapDisco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(puertosUSB)
                    .addComponent(campoUSB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoHDMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(puertosHDMI))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(marcaMonitor)
                    .addComponent(ComboMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pulgadas)
                    .addComponent(campoPulgadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(precio)
                    .addComponent(campoPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.getAccessibleContext().setAccessibleName("");

        botonBuscar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        botonBuscar.setText("Buscar");
        botonBuscar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        botonEditar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        botonEditar.setText("Editar");
        botonEditar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        botonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarActionPerformed(evt);
            }
        });

        botonEliminar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        botonEliminar.setText("Eliminar");
        botonEliminar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        botonLimpiar.setText("CLEAR");
        botonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(iniciarSesion)
                .addGap(85, 85, 85))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(botonCancelar)
                .addGap(26, 26, 26)
                .addComponent(botonAgregar)
                .addGap(14, 14, 14)
                .addComponent(botonBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonEditar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonEliminar)
                .addGap(14, 14, 14))
            .addGroup(layout.createSequentialGroup()
                .addGap(195, 195, 195)
                .addComponent(botonLimpiar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iniciarSesion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonCancelar)
                    .addComponent(botonAgregar)
                    .addComponent(botonBuscar)
                    .addComponent(botonEditar)
                    .addComponent(botonEliminar))
                .addGap(18, 18, 18)
                .addComponent(botonLimpiar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void campoIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoIdActionPerformed

    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        System.exit(0); 
    }//GEN-LAST:event_botonCancelarActionPerformed

    private void botonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarActionPerformed
        
        String cc = null;
	try{
		cc = campoId.getText();
		Integer id = Integer.parseInt(cc);
	}catch(NumberFormatException error){
	JOptionPane.showMessageDialog(this, "La id debe tener numero",
                "Error de formato", JOptionPane.ERROR_MESSAGE);
		return;
	}
        
        char[] pass1 = campoPassword1.getPassword();
        String clave1 = String.copyValueOf(pass1);
        char[] pass2 = campoPassword2.getPassword();
        String clave2 = String.copyValueOf(pass2);        
        if(!clave1.equals(clave2)) {
            JOptionPane.showMessageDialog(this, "Los Password son diferentes", 
                    "Error Claves no son iguales", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(clave1.isEmpty() || clave2.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Los Password son necesarios", 
                    "Error Claves no son iguales", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String marca = campoMarcaPC.getText();
        if(marca == null || marca.trim().isEmpty()){
	JOptionPane.showMessageDialog(this, "La marca es necesario",
		"Marca vacio",
		JOptionPane.ERROR_MESSAGE);
        campoMarcaPC.setText("");
	return;
        }
        
        for(int i = 0; i < marca.length(); i++){
            char caracter = marca.charAt(i);
	    if(Character.isDigit(caracter)){
              JOptionPane.showMessageDialog(this, "Nombre con formato invalido",
	"Nombre incorrecto", JOptionPane.ERROR_MESSAGE);
	return;
            }
        }  

        String categoria = null;  
        if(comboCategoria.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(this, "Seleccione una Categoria",
                     "ERROR FORMULARIO", 
                     JOptionPane.ERROR_MESSAGE);
            return;
        }
        else{
            categoria = (String)comboCategoria.getSelectedItem();
        }
        
        String marcaCpu = null;
        if(radioIntel.isSelected()){
            marcaCpu = "Intel";
        }else if(radioAMD.isSelected()){
            marcaCpu = "AMD";           
        }else if(radioXX.isSelected()){
            marcaCpu = "Otros";
        }
        
        String velocidadCpU = campoVelCPU.getText();
        if(velocidadCpU == null || marca.trim().isEmpty()){
	JOptionPane.showMessageDialog(this, "La velocidad del CPU es necesario",
		"velocidad CPU vacio",
		JOptionPane.ERROR_MESSAGE);
        campoVelCPU.setText("");
	return;
        }
        
        String tecnologiaRam = null;
        if(radioDDR.isSelected()){
            tecnologiaRam = "DDR";
        }else if(radioDDR2.isSelected()){
            tecnologiaRam = "DDR2";           
        }else if(radioDDR3.isSelected()){
            tecnologiaRam = "DDR3";
        }else if(radioEEC.isSelected()){
            tecnologiaRam = "EEC";           
        }else if(radioXXX.isSelected()){
            tecnologiaRam = "Otros";            
        }
        
        String capacidadRam = campoCapRAM.getText();
        if(capacidadRam == null || marca.trim().isEmpty()){
	JOptionPane.showMessageDialog(this, "La capacidad del RAM es necesario",
		"capacidad RAM vacio",
		JOptionPane.ERROR_MESSAGE);
        campoCapRAM.setText("");
	return;
        }

        String tecnologiaDisco = null;
        if(radioHDD.isSelected()){
            tecnologiaDisco = "HDD";
        }else if(radioSSD.isSelected()){
            tecnologiaDisco = "SSD";                    
        }else if(radioXXXX.isSelected()){
            tecnologiaDisco = "Otros";            
        }
        
        String capacidadDisco = campoCapDisco.getText();
        if(capacidadDisco == null || marca.trim().isEmpty()){
	JOptionPane.showMessageDialog(this, "La capacidad del Disco es necesario",
		"capacidad Disco vacio",
		JOptionPane.ERROR_MESSAGE);
        campoCapDisco.setText("");
	return;
        }        
        
        String numPuertosUSB = campoUSB.getText();
        if(numPuertosUSB == null || marca.trim().isEmpty()){
	JOptionPane.showMessageDialog(this, "Los numeros de puertos USB es necesario",
		"Numero de puertos USB vacio",
		JOptionPane.ERROR_MESSAGE);
        campoUSB.setText("");
	return;
        }

        String numPuertosHDMI = campoHDMI.getText();
        if(numPuertosHDMI == null || marca.trim().isEmpty()){
	JOptionPane.showMessageDialog(this, "Los numeros de puertos HDMI es necesario",
		"Numero de puertos HDMI vacio",
		JOptionPane.ERROR_MESSAGE);
        campoHDMI.setText("");
	return;
        }          

        String MarcaMonitor = null;  
        if(ComboMonitor.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(this, "Seleccione un Monitor",
                     "ERROR FORMULARIO", 
                     JOptionPane.ERROR_MESSAGE);
            return;
        }
        else{
            MarcaMonitor = (String)ComboMonitor.getSelectedItem();
        }

        String pulgadas = campoPulgadas.getText();
        if(pulgadas == null || marca.trim().isEmpty()){
	JOptionPane.showMessageDialog(this, "Los numeros de pulgadas es necesario",
		"Numero de pulgadas vacio",
		JOptionPane.ERROR_MESSAGE);
        campoPulgadas.setText("");
	return;
        }

        String precio = campoPrecio.getText();
        if(precio == null || marca.trim().isEmpty()){
	JOptionPane.showMessageDialog(this, "El precio es necesario",
		"Precio vacio",
		JOptionPane.ERROR_MESSAGE);
        campoPrecio.setText("");
	return;
        } 
        
        EntityManagerFactory conBd = Persistence.createEntityManagerFactory("mibd");

        ComputadorJpaController crudComputador = new ComputadorJpaController(conBd);        
        


        Computador u = new Computador(cc);
        u.setMarca(marca);        
        u.setCategoria(categoria);
        u.setMarcaCpu(marcaCpu);
        u.setVelocidadCpU(velocidadCpU);        
        u.setTecnologiaRam(tecnologiaRam);
        u.setCapacidadRam(capacidadRam);
        u.setTecnologiaDisco(tecnologiaDisco);
        u.setCapacidadDisco(capacidadDisco);
        u.setNumPuertosUSB(numPuertosUSB);
        u.setNumPuertosHDMI(numPuertosHDMI);       
        u.setMarcaMonitor(MarcaMonitor);
        u.setPulgadas(pulgadas);       
        u.setPrecio(precio);        
        u.setPassword(clave1);

        try{
   int opcion = JOptionPane.showConfirmDialog(this, "Esta seguro de registrar?",
          "CONFIRMAR", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(opcion == JOptionPane.YES_OPTION) {
            crudComputador.create(u);
            int totalComputador = crudComputador.getComputadorCount();
            JOptionPane.showMessageDialog(this, "COMPUTADOR REGISTRADO\nTotal: "+totalComputador);
            limpiarFormulario();
            }
        }
        catch(PreexistingEntityException error1){
            JOptionPane.showMessageDialog(this, "El Computador YA EXISTE",
            "Error de BD", 
            JOptionPane.ERROR_MESSAGE);
        }
        catch(Exception error2){
            JOptionPane.showMessageDialog(this, "Problemas con la BD",
            "Error de BD", 
            JOptionPane.ERROR_MESSAGE);            
        }
     
    }//GEN-LAST:event_botonAgregarActionPerformed

           public void limpiarFormulario(){
           campoId.setText("");
           campoPassword1.setText("");
           campoPassword2.setText("");
           campoMarcaPC.setText("");
           comboCategoria.setSelectedIndex(0);         
           radioIntel.setSelected(false);         
           radioAMD.setSelected(false);
           radioXX.setSelected(false);
           campoVelCPU.setText("");            
           radioDDR.setSelected(false);
           radioDDR2.setSelected(false);
           radioDDR3.setSelected(false);
           radioEEC.setSelected(false);            
           radioXXX.setSelected(false);
           campoCapRAM.setText("");
           radioHDD.setSelected(false);
           radioSSD.setSelected(false);            
           radioXXXX.setSelected(false);
           campoCapDisco.setText("");
           campoUSB.setText("");
           campoHDMI.setText("");
           ComboMonitor.setSelectedIndex(0);            
           campoPulgadas.setText("");
           campoPrecio.setText("");            
        }    
    
    private void campoMarcaPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoMarcaPCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoMarcaPCActionPerformed

    private void campoVelCPUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoVelCPUActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoVelCPUActionPerformed

    private void campoCapRAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoCapRAMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoCapRAMActionPerformed

    private void campoCapDiscoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoCapDiscoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoCapDiscoActionPerformed

    private void campoUSBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoUSBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoUSBActionPerformed

    private void campoHDMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoHDMIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoHDMIActionPerformed

    private void campoPulgadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoPulgadasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoPulgadasActionPerformed

    private void campoPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoPrecioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoPrecioActionPerformed

    private void ComboMonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboMonitorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboMonitorActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed

        String id = campoId.getText();
        if(id == null || id.isEmpty()){
	JOptionPane.showMessageDialog(this, "La id es necesaria",
	"id vacias", JOptionPane.ERROR_MESSAGE);
	return;
	}

        try{
            EntityManagerFactory conBD = Persistence.createEntityManagerFactory("mibd");
            ComputadorJpaController crudComputador = new ComputadorJpaController(conBD);
            Computador u = crudComputador.findComputador(id);
            if (u == null) {
		JOptionPane.showMessageDialog(this, "El Computador con id " + id + " NO existe",
		"id vacias", JOptionPane.ERROR_MESSAGE);
		return;
	}
        limpiarFormulario();
        campoId.setText(u.getId());
	campoPassword1.setText(u.getId());
	campoPassword2.setText(u.getId());
	campoMarcaPC.setText(u.getMarca());
        comboCategoria.setSelectedItem(u.getCategoria());        
        if(u.getMarcaCpu().equalsIgnoreCase("Intel")){
		radioIntel.setSelected(true);
	}else if(u.getMarcaCpu().equalsIgnoreCase("AMD")){
		radioAMD.setSelected(true);
	}if(u.getMarcaCpu().equalsIgnoreCase("Otros")){
		radioXX.setSelected(true);
	}
        campoVelCPU.setText(u.getVelocidadCpU());
        if(u.getTecnologiaRam().equalsIgnoreCase("DDR")){
		radioDDR.setSelected(true);
	}else if(u.getTecnologiaRam().equalsIgnoreCase("DDR2")){
		radioDDR2.setSelected(true);
	}else if(u.getTecnologiaRam().equalsIgnoreCase("DDR3")){
		radioDDR3.setSelected(true);
	}else if(u.getTecnologiaRam().equalsIgnoreCase("EEC")){
		radioEEC.setSelected(true);                
	}if(u.getTecnologiaRam().equalsIgnoreCase("Otros")){
		radioXXX.setSelected(true);
	}
        campoCapRAM.setText(u.getCapacidadRam());
        if(u.getTecnologiaDisco().equalsIgnoreCase("HDD")){
		radioHDD.setSelected(true);
	}else if(u.getTecnologiaDisco().equalsIgnoreCase("SSD")){
		radioSSD.setSelected(true);              
	}if(u.getTecnologiaDisco().equalsIgnoreCase("Otros")){
		radioXXXX.setSelected(true);
	}
        campoCapDisco.setText(u.getCapacidadDisco());
        campoUSB.setText(u.getNumPuertosUSB());
        campoHDMI.setText(u.getNumPuertosHDMI());
        ComboMonitor.setSelectedItem(u.getMarcaMonitor());
	campoPulgadas.setText(u.getPulgadas());
	campoPrecio.setText(u.getPrecio()); 
        
        }catch(PersistenceException error){
            JOptionPane.showMessageDialog(this, "Error de conexion con la BD",
            "Server BD apagado", JOptionPane.ERROR_MESSAGE);
            return;
        } catch (Exception ex) {
            Logger.getLogger(VentanaCrudComputadores.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonBuscarActionPerformed

    private void botonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarActionPerformed

            if(validarCampo(campoId)== false){
            JOptionPane.showMessageDialog(this, "La Id es obligatoria");
            return;
        }
            if(validarCampo(campoPassword1)== false){
            JOptionPane.showMessageDialog(this, "La contraseña es obligatoria");
            return;
        }
            if(validarCampo(campoMarcaPC)== false){
            JOptionPane.showMessageDialog(this, "La Marca del PC es obligatoria");
            return;
        }             
            if(validarCampo(campoVelCPU)== false){
            JOptionPane.showMessageDialog(this, "La velocidad del CPU es obligatoria");
            return;
        }
            if(validarCampo(campoCapRAM)== false){
            JOptionPane.showMessageDialog(this, "El campo del RAM es obligatoria");
            return;
        }
            if(validarCampo(campoCapDisco)== false){
            JOptionPane.showMessageDialog(this, "El campo del Disco es obligatoria");
            return;
        }
            if(validarCampo(campoUSB)== false){
            JOptionPane.showMessageDialog(this, "Los numeros de puertos USB es obligatoria");
            return;
        }             
            if(validarCampo(campoHDMI)== false){
            JOptionPane.showMessageDialog(this, "Los numeros de puertos HDMI obligatoria");
            return;
        }
            if(validarCampo(campoPulgadas)== false){
            JOptionPane.showMessageDialog(this, "Las pulgadas es obligatoria");
            return;
        }
            if(validarCampo(campoPrecio)== false){
            JOptionPane.showMessageDialog(this, "El precio es obligatoria");
            return;
        }

        char[] pass = campoPassword1.getPassword(); 
        String password = String.valueOf(pass); 
        String marca = campoMarcaPC.getText();
        String velocidadCpU = campoVelCPU.getText();
        String capacidadRam = campoCapRAM.getText();
        String capacidadDisco = campoCapDisco.getText();
        String numPuertosUSB = campoUSB.getText();
        String numPuertosHDMI = campoHDMI.getText();
        String pulgadas = campoPulgadas.getText();
        String precio = campoPrecio.getText();
        
        
        password = (password.isEmpty()) ? "" : password;
        u.setPassword(password);
        u.setMarca(marca);
        u.setVelocidadCpU(velocidadCpU);
        u.setCapacidadRam(capacidadRam);
        u.setCapacidadDisco(capacidadDisco);
        u.setNumPuertosUSB(numPuertosUSB);
        u.setNumPuertosHDMI(numPuertosHDMI);
        u.setPulgadas(pulgadas);
        u.setPrecio(precio);
        

            EntityManagerFactory conBD = Persistence.createEntityManagerFactory("mibd");
            ComputadorJpaController crudComputador = new ComputadorJpaController(conBD);      
        
            try{
                crudComputador.edit(u);
                JOptionPane.showMessageDialog(this, "Computador editado con éxito");
                botonLimpiarActionPerformed(null);                
            }catch (NonexistentEntityException ex) {
            
            JOptionPane.showMessageDialog(this, "La id no existe");
        } catch (Exception ex){
         JOptionPane.showMessageDialog(this, "No fue posible Editar el Computador.");
        }  
            
//ESTE ES EL CONCEPTO , INVESTIGUE ESTE EVENTO EL CUAL NO ESTA EN VIDEO DEL MODULO
//PERO SE ME OCURRIO PLANTEARLO ASI
    //No permite que la céduala sea cambiada
//        String cc = campoId.getText();
//            if (u.getId ().equals(cc) == false){
//                JOptionPane.showMessageDialog(this, "No puede cambiar la cedula");
//                campoId.setText(u.getId());
//                return;
//            }
//Muestra un mensaje de confirmación al editar un usuario
//            int res = JOptionPane.showConfirmDialog(this, "¿Desea Editar este Usuario?","OJO - PILAS",JOptionPane.YES_NO_OPTION);
//            if(res == JOptionPane.NO_OPTION){
//                return;   
//            }
//        PRUEBA 
//Recuperar datos
//        String pulgadas = campoPulgadas.getText();
//Actualizar los datos del usuario según los valores de la ventanaCrudUsuario
//        u.setPulgadas(pulgadas);
//        
  //Conectar a la base
//        EntityManagerFactory conBD = Persistence.createEntityManagerFactory("mibd");
 //Crear objeto de la clase DocenteJpaController.java
//        ComputadorJpaController crudComputador = new ComputadorJpaController(conBD);
//
//        try{
//        crudComputador.edit(u);
//        JOptionPane.showMessageDialog(this,"Usuario editado con exito");
//            
//        }catch(PersistenceException error){
//            JOptionPane.showMessageDialog(this, "Error de conexion con la BD",
//            "Server BD apagado", JOptionPane.ERROR_MESSAGE);
//            return;
//        } catch (Exception ex) {
//            Logger.getLogger(VentanaCrudComputadores.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_botonEditarActionPerformed
 
    public boolean validarCampo(JTextField campo){
        String dato = campo.getText();
        dato = dato.trim();
        if(dato.isEmpty()){
            campo.setText("");
            campo.setBackground(Color.RED);
            campo.requestFocus();
            return false;
        }
        else{
            return true;
            
        }
    }
    
    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed

            String cedula = campoId.getText();
         
       
            EntityManagerFactory conexion = Persistence.createEntityManagerFactory("mibd");
            ComputadorJpaController crudUser = new ComputadorJpaController(conexion);
            try{
            crudUser.destroy(cedula);
            int total = crudUser.getComputadorCount();
            String m = "Usuario ELIMINADO con Exito\nTOTAL: "+total;
            JOptionPane.showMessageDialog(this,m);
             botonLimpiarActionPerformed(null);
        } catch (NonexistentEntityException ex) {
            JOptionPane.showMessageDialog(this, "Usuario con cedula:" + cedula + "No existe");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,"Error no fue posible eliminar el usuario");
        } 
            
    }//GEN-LAST:event_botonEliminarActionPerformed

    private void botonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiarActionPerformed

       
           campoId.setText("");
           campoPassword1.setText("");
           campoPassword2.setText("");
           campoMarcaPC.setText("");
           comboCategoria.setSelectedIndex(0);         
           radioIntel.setSelected(false);         
           radioAMD.setSelected(false);
           radioXX.setSelected(false);
           campoVelCPU.setText("");            
           radioDDR.setSelected(false);
           radioDDR2.setSelected(false);
           radioDDR3.setSelected(false);
           radioEEC.setSelected(false);            
           radioXXX.setSelected(false);
           campoCapRAM.setText("");
           radioHDD.setSelected(false);
           radioSSD.setSelected(false);            
           radioXXXX.setSelected(false);
           campoCapDisco.setText("");
           campoUSB.setText("");
           campoHDMI.setText("");
           ComboMonitor.setSelectedIndex(0);            
           campoPulgadas.setText("");
           campoPrecio.setText("");      
     
        
   
    }//GEN-LAST:event_botonLimpiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaCrudComputadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaCrudComputadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaCrudComputadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaCrudComputadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                VentanaCrudComputadores dialog = new VentanaCrudComputadores(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboMonitor;
    private javax.swing.JButton botonAgregar;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonCancelar;
    private javax.swing.JButton botonEditar;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonLimpiar;
    private javax.swing.JTextField campoCapDisco;
    private javax.swing.JTextField campoCapRAM;
    private javax.swing.JTextField campoHDMI;
    private javax.swing.JTextField campoId;
    private javax.swing.JTextField campoMarcaPC;
    private javax.swing.JPasswordField campoPassword1;
    private javax.swing.JPasswordField campoPassword2;
    private javax.swing.JTextField campoPrecio;
    private javax.swing.JTextField campoPulgadas;
    private javax.swing.JTextField campoUSB;
    private javax.swing.JTextField campoVelCPU;
    private javax.swing.JLabel capacidadDisco;
    private javax.swing.JLabel capacidadRAM;
    private javax.swing.JComboBox<String> comboCategoria;
    private javax.swing.JLabel contraseña;
    private javax.swing.JLabel contraseña1;
    private javax.swing.ButtonGroup grupoCPU;
    private javax.swing.ButtonGroup grupoDisco;
    private javax.swing.ButtonGroup grupoRAM;
    private javax.swing.JLabel iddelProducto;
    private javax.swing.JLabel iniciarSesion;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JLabel marcaMonitor;
    private javax.swing.JLabel marcaPC;
    private javax.swing.JLabel precio;
    private javax.swing.JLabel puertosHDMI;
    private javax.swing.JLabel puertosUSB;
    private javax.swing.JLabel pulgadas;
    private javax.swing.JRadioButton radioAMD;
    private javax.swing.JRadioButton radioDDR;
    private javax.swing.JRadioButton radioDDR2;
    private javax.swing.JRadioButton radioDDR3;
    private javax.swing.JRadioButton radioEEC;
    private javax.swing.JRadioButton radioHDD;
    private javax.swing.JRadioButton radioIntel;
    private javax.swing.JRadioButton radioSSD;
    private javax.swing.JRadioButton radioXX;
    private javax.swing.JRadioButton radioXXX;
    private javax.swing.JRadioButton radioXXXX;
    private javax.swing.JLabel velocidadCPU;
    // End of variables declaration//GEN-END:variables
}
